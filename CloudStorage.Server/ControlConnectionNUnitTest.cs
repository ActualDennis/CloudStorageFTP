using CloudStorage.Server.Authentication;
using CloudStorage.Server.Commands;
using CloudStorage.Server.Connections;
using CloudStorage.Server.Data;
using CloudStorage.Server.Exceptions;
using CloudStorage.Server.Factories;
using CloudStorage.Server.FileSystem;
using CloudStorage.Server.Helpers;
using CloudStorage.Server.Logging;
using CloudStorage.Server.Misc;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using NUnit.Framework;
using CloudStorage.Server;

namespace CloudStorage.Server.NUnitTests
{
    [TestFixture]
    public class ControlConnectionNUnitTests
    {
        private ControlConnection _controlConnection
        {
            get;
            set;
        }

        private Mock<IAuthenticationProvider> authenticationProvider
        {
            get;
            set;
        }

        private Mock<ICloudStorageFileSystemProvider> fileSystemProvider
        {
            get;
            set;
        }

        private Mock<ILogger> logger
        {
            get;
            set;
        }

        [SetUp]
        public void Setup()
        {
            authenticationProvider = new Mock<IAuthenticationProvider>();
            fileSystemProvider = new Mock<ICloudStorageFileSystemProvider>();
            logger = new Mock<ILogger>();
            _controlConnection = new ControlConnection(authenticationProvider, fileSystemProvider, logger);
        }

        [Test]
        public void DisposeTest()
        {
            Assert.DoesNotThrow(() => _controlConnection.Dispose());
        }

        [Test]
        public void InitiateConnectionTest()
        {
            CancellationToken W9T6hPHqb = null;
            Task actual = _controlConnection.InitiateConnection(W9T6hPHqb);
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void SendResponseTest()
        {
            FtpReply W3IqKNBjQ = null;
            bool WG8Qwtoga = false;
            Assert.DoesNotThrow(() => _controlConnection.SendResponse(W3IqKNBjQ, WG8Qwtoga));
        }

        [Test]
        public void OnEncryptionEnabledTest()
        {
            Task actual = _controlConnection.OnEncryptionEnabled();
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnAuthenticateUserTest()
        {
            string WPE8nSMF6 = "";
            string WvlRa9cKo = "";
            bool actual = _controlConnection.OnAuthenticateUser(WPE8nSMF6, WvlRa9cKo);
            bool expected = false;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnUserRegisteredTest()
        {
            string[] WsCkgZdPs = null;
            Task actual = _controlConnection.OnUserRegistered(WsCkgZdPs);
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnEnterActiveModeTest()
        {
            string W84IRhVrs = "";
            Assert.DoesNotThrow(() => _controlConnection.OnEnterActiveMode(W84IRhVrs));
        }

        [Test]
        public void OnDataBufferSizeChangedTest()
        {
            int WzGlI2KRX = 0;
            int actual = _controlConnection.OnDataBufferSizeChanged(WzGlI2KRX);
            int expected = 0;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnEnterPassiveModeTest()
        {
            string actual = _controlConnection.OnEnterPassiveMode();
            string expected = "";
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnQuitTest()
        {
            Assert.DoesNotThrow(() => _controlConnection.OnQuit());
        }

        [Test]
        public void OnUploadFileTest()
        {
            string WH7tMVEGA = "";
            Task actual = _controlConnection.OnUploadFile(WH7tMVEGA);
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnDownloadFileTest()
        {
            string Wk7u93Wvg = "";
            Task actual = _controlConnection.OnDownloadFile(Wk7u93Wvg);
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnSetWorkingDirectoryTest()
        {
            string WQUjJBgLH = "";
            Assert.DoesNotThrow(() => _controlConnection.OnSetWorkingDirectory(WQUjJBgLH));
        }

        [Test]
        public void OnGetOccupiedSpaceTest()
        {
            string WY40OfrHp = "";
            long actual = _controlConnection.OnGetOccupiedSpace(WY40OfrHp);
            long expected = 0;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnDeleteTest()
        {
            string Wals2IBG6 = "";
            Assert.DoesNotThrow(() => _controlConnection.OnDelete(Wals2IBG6));
        }

        [Test]
        public void OnMoveUpTest()
        {
            Assert.DoesNotThrow(() => _controlConnection.OnMoveUp());
        }

        [Test]
        public void OnCreateDirectoryTest()
        {
            string WzDbPNzRg = "";
            Assert.DoesNotThrow(() => _controlConnection.OnCreateDirectory(WzDbPNzRg));
        }

        [Test]
        public void OnSendDataTest()
        {
            Stream WhAyRBtHv = null;
            Task actual = _controlConnection.OnSendData(WhAyRBtHv);
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnDataChannelEncryptionEnabledTest()
        {
            Task actual = _controlConnection.OnDataChannelEncryptionEnabled();
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnDataChannelEncryptionDisabledTest()
        {
            Task actual = _controlConnection.OnDataChannelEncryptionDisabled();
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnAuthenticatedTest()
        {
            string WnoK65OUM = "";
            Task actual = _controlConnection.OnAuthenticated(WnoK65OUM);
            Task expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnUtf8EnabledTest()
        {
            Assert.DoesNotThrow(() => _controlConnection.OnUtf8Enabled());
        }

        [Test]
        public void OnUtf8DisabledTest()
        {
            Assert.DoesNotThrow(() => _controlConnection.OnUtf8Disabled());
        }

        [Test]
        public void OnGetFileLastModifiedTest()
        {
            string WnbJBOA2D = "";
            Task<string> actual = _controlConnection.OnGetFileLastModified(WnbJBOA2D);
            Task<string> expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnSendFeatureListTest()
        {
            FtpReply WbVtuonuS = null;
            Assert.DoesNotThrow(() => _controlConnection.OnSendFeatureList(WbVtuonuS));
        }

        [Test]
        public void OnRenameFromCommandReceivedTest()
        {
            Task<string> actual = _controlConnection.OnRenameFromCommandReceived();
            Task<string> expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }

        [Test]
        public void OnRenameTest()
        {
            string WfjEqJjkO = "";
            string WCavUt82j = "";
            Assert.DoesNotThrow(() => _controlConnection.OnRename(WfjEqJjkO, WCavUt82j));
        }

        [Test]
        public void OnUserCommandReceivedTest()
        {
            string WEkbwqzfq = "";
            Task<string> actual = _controlConnection.OnUserCommandReceived(WEkbwqzfq);
            Task<string> expected = null;
            Assert.That(actual, Is.EqualTo(expected));
            Assert.Fail("autogenerated");
        }
    }
}